@{
    ViewData["Title"] = "Transaction History";
}
@model TransactionViewModel
<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <img src="/resources/transaction1.png" alt="Transaction Icon" style="width: 32px; height: 32px; margin-right: 12px;">
            <h1 class="h3 mb-0">Transaction</h1>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="search-container">
                        <div class="input-group">
                            <input type="text"
                                   class="form-control"
                                   placeholder="Search transactions..."
                                   id="searchInput"
                                   autocomplete="off">
                            <button class="btn btn-primary" type="button">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                        <div class="search-suggestions" id="searchSuggestions"></div>
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="d-flex gap-2">
                        <select class="form-select w-auto" id="transactionType">
                            <option value="">Transaction Type</option>
                            <option value="borrow">Borrow</option>
                            <option value="return">Return</option>
                        </select>
                        <input type="date" class="form-control w-auto" id="dateFilter">
                        <button class="btn btn-outline-secondary" type="button" id="clearFilters">
                            <i class="bi bi-eraser-fill"></i>
                            Clear Filters
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>T_ID</th>
                            <th>S_ID</th>
                            <th>Student Name</th>
                            <th>B_ID</th>
                            <th>Book Name</th>
                            <th>Type</th>
                            <th>Date</th>
                            <th>Due Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Model.transactionDetails)
                        {
                            <tr>
                                <td>@transaction.TransactionId</td>
                                <td>@transaction.StudentId</td>
                                <td>@transaction.Name</td>
                                <td>@transaction.BookId</td>
                                <td>@transaction.Title</td>
                                <td>@transaction.TransactionType</td>
                                <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                                <td>@transaction.DueDate.ToString("yyyy-MM-dd")</td>
                                <td>@transaction.Status</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <nav class="mt-4">
                <ul class="pagination justify-content-end">
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1">Previous</a>
                    </li>
                    <li class="page-item active"><a class="page-link" href="#">1</a></li>
                    <li class="page-item"><a class="page-link" href="#">2</a></li>
                    <li class="page-item"><a class="page-link" href="#">3</a></li>
                    <li class="page-item">
                        <a class="page-link" href="#">Next</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<style>
    .btn-primary {
        background-color: #255D81;
        border-color: #255D81;
    }

        .btn-primary:hover {
            background-color: white;
            color: #255D81;
            border-color: #255D81;
        }

    .btn-outline-secondary {
        color: #255D81;
        border-color: #255D81;
    }

        .btn-outline-secondary:hover {
            background-color: #255D81;
            color: white;
        }

    .form-control:focus, .form-select:focus {
        border-color: #255D81;
        box-shadow: 0 0 0 0.25rem rgba(37, 93, 129, 0.25);
    }

    .page-link {
        color: #255D81;
    }

    .page-item.active .page-link {
        background-color: #255D81;
        border-color: #255D81;
    }

    
    .search-suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ddd;
        border-radius: 0 0 4px 4px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        z-index: 1000;
        display: none;
        max-height: 300px;
        overflow-y: auto;
    }

    .search-suggestion-item {
        padding: 8px 12px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .search-suggestion-item:hover {
            background-color: #f8f9fa;
        }

    .search-container {
        position: relative;
    }

    .search-icon {
        color: #6c757d;
        font-size: 14px;
    }

    .highlight {
        background-color: #e9ecef;
        padding: 0 2px;
        border-radius: 2px;
    }

    .card{
        margin:0px 5px;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const searchInput = document.getElementById('searchInput');
        const transactionType = document.getElementById('transactionType');
        const dateFilter = document.getElementById('dateFilter');
        const clearFiltersBtn = document.getElementById('clearFilters');



        clearFiltersBtn.addEventListener('click', function () {
            searchInput.value = '';
            transactionType.value = '';
            dateFilter.value = '';
        });



        //fuzzy search



        const suggestionsBox = document.getElementById('searchSuggestions');

        // Backend API endpoint for transactions
        const apiUrl = '/Transaction/All/'; // Update this URL as per your API route

        // Fuzzy search function
        function fuzzySearch(query, text) {
            const pattern = query.split('').map(char => `(?=.*${char})`).join('');
            const regex = new RegExp(pattern, 'i');
            return regex.test(text);
        }

        // Highlight matching text
        function highlightMatch(text, query) {
            const regex = new RegExp(`(${query})`, 'gi');
            return text.replace(regex, '<span class="highlight">$1</span>');
        }

        // Generate suggestions from server-side API
        async function generateSuggestions(query) {
            if (!query) {
                suggestionsBox.style.display = 'none';
                return;
            }

            try {
                const response = await fetch(`${apiUrl}?query=${encodeURIComponent(query)}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                if (!response.ok) {
                    throw new Error('Error fetching suggestions');
                }

                const transactions = await response.json(); // Assuming the API returns an array of transaction objects

                if (transactions.length > 0) {
                    const html = transactions.map(transaction => `
                                <div class="search-suggestion-item" data-id="${transaction.transactionId}">
                                    <i class="bi bi-search search-icon"></i>
                                    <span>${highlightMatch(transaction.description || transaction.transactionId, query)}</span>
                                </div>
                            `).join('');

                    suggestionsBox.innerHTML = html;
                    suggestionsBox.style.display = 'block';
                } else {
                    suggestionsBox.style.display = 'none';
                }
            } catch (error) {
                console.error('Error fetching suggestions:', error);
                suggestionsBox.style.display = 'none';
            }
        }

        // Event listener for search input
        searchInput.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            generateSuggestions(query);
        });

        // Handle suggestion click
        suggestionsBox.addEventListener('click', (e) => {
            const item = e.target.closest('.search-suggestion-item');
            if (item) {
                searchInput.value = item.querySelector('span').textContent;
                suggestionsBox.style.display = 'none';

                // Example: Redirect to transaction details page
                const transactionId = item.dataset.id;
                window.location.href = `/transactions/details/${transactionId}`; // Update URL as per your routing
            }
        });

        // Close suggestions when clicking outside
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.search-container')) {
                suggestionsBox.style.display = 'none';
            }
        });
    });
</script>

